events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式 - 包含Cloudflare的真实IP
    log_format main '$http_cf_connecting_ip - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # 获取真实客户端IP（从Cloudflare）
    set_real_ip_from 173.245.48.0/20;
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 104.16.0.0/13;
    set_real_ip_from 104.24.0.0/14;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 131.0.72.0/22;
    set_real_ip_from 2400:cb00::/32;
    set_real_ip_from 2606:4700::/32;
    set_real_ip_from 2803:f800::/32;
    set_real_ip_from 2405:b500::/32;
    set_real_ip_from 2405:8100::/32;
    set_real_ip_from 2c0f:f248::/32;
    set_real_ip_from 2a06:98c0::/29;
    real_ip_header CF-Connecting-IP;

    # 基本配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # 通用 SSL 配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # HTTP 服务器 - 重定向所有子域名到 HTTPS
    server {
        listen 80;
        server_name blog.example.com blog1.example.com pic.example.com;
        
        # 重定向所有HTTP请求到HTTPS
        return 301 https://$server_name$request_uri;
    }

    # 静态资源服务器 - pic.example.com
    server {
        listen 443 ssl http2;
        server_name pic.example.com;

        # SSL 证书配置
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # 安全头配置
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        # 静态文件根目录 - 根据您的实际路径修改
        root /var/www/static;
        index index.html index.htm;

        location ~* \.html$ {
            expires 5m;  # 或者使用 -1 完全不缓存
            add_header Cache-Control "no-cache, must-revalidate";
        }

        # API 接口 - 不缓存
        # location /api/ {
        #     expires -1;
        #     add_header Cache-Control "no-cache, no-store, must-revalidate";
        #     add_header Pragma "no-cache";
        #     proxy_pass http://backend;
        # }

        # 静态文件缓存配置
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|txt|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # 主要静态文件位置
        location / {
            try_files $uri $uri/ =404;
            
            # 防止访问隐藏文件
            location ~ /\. {
                deny all;
            }
        }

        # 健康检查
        location /health {
            access_log off;
            return 200 "static server healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # 博客服务器 - blog.example.com (3000端口)
    server {
        listen 443 ssl http2;
        server_name blog.example.com;

        # SSL 证书配置
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # 安全头配置
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        # 反向代理到本机3000端口
        location / {
            proxy_pass http://127.0.0.1:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;

            # 传递真实的客户端IP和协议信息
            proxy_set_header X-Real-IP $http_cf_connecting_ip;
            proxy_set_header X-Forwarded-For $http_cf_connecting_ip;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            proxy_cache_bypass $http_upgrade;
            proxy_buffering off;

            # 超时设置
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # 健康检查端点
        location /health {
            access_log off;
            return 200 "blog healthy\n";
            add_header Content-Type text/plain;
        }

        # 错误页面
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # 博客1服务器 - blog1.example.com (3001端口)
    # server {
    #     listen 443 ssl http2;
    #     server_name blog1.example.com;

    #     # SSL 证书配置
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;

    #     # 安全头配置
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    #     add_header X-Content-Type-Options nosniff;
    #     add_header X-Frame-Options SAMEORIGIN;
    #     add_header X-XSS-Protection "1; mode=block";
    #     add_header Referrer-Policy "strict-origin-when-cross-origin";

    #     # 反向代理到本机3001端口
    #     location / {
    #         proxy_pass http://127.0.0.1:3001;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection 'upgrade';
    #         proxy_set_header Host $host;

    #         # 传递真实的客户端IP和协议信息
    #         proxy_set_header X-Real-IP $http_cf_connecting_ip;
    #         proxy_set_header X-Forwarded-For $http_cf_connecting_ip;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_set_header X-Forwarded-Host $host;
    #         proxy_set_header X-Forwarded-Port $server_port;

    #         proxy_cache_bypass $http_upgrade;
    #         proxy_buffering off;

    #         # 超时设置
    #         proxy_connect_timeout 30s;
    #         proxy_send_timeout 60s;
    #         proxy_read_timeout 60s;
    #     }

    #     # 健康检查端点
    #     location /health {
    #         access_log off;
    #         return 200 "blog1 healthy\n";
    #         add_header Content-Type text/plain;
    #     }

    #     # 错误页面
    #     error_page 500 502 503 504 /50x.html;
    #     location = /50x.html {
    #         root /usr/share/nginx/html;
    #     }
    # }
}